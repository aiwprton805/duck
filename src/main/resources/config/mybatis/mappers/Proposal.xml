<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.magistr.duck.dao.ProposalDao">
    <!-- ============================== RESULT MAP ============================== -->
    <resultMap type="Proposal" id="proposalResult">
        <id property="id" column="id" />
        <result property="lectorId" column="lector_id" />
        <result property="status" javaType="com.magistr.duck.common.enums.ProposalStatus" column="proposal_status_id" />
        <result property="lastName" column="last_name" />
        <result property="firstName" column="first_name" />
        <result property="patronymic" column="patronymic" />
        <result property="nickname" column="nickname" />
        <result property="sex" javaType="com.magistr.duck.common.enums.Sex" column="sex" />
        <result property="email" column="email" />
        <result property="term" column="term" />
        <result property="problem" column="problem" />
        <result property="contextPath" column="context_path" />
        <result property="contextUrl" column="context_url" />
        <result property="imagesPath" column="images_path" />
        <result property="otherDocsPath" column="other_docs_path" />
        <result property="created" javaType="java.time.OffsetDateTime" column="created" />
    </resultMap>

    <!-- ======================= SELECT ALL PROPOSALS SQL ======================= -->
    <sql id="selectAllProposals">
        SELECT
            p.id AS id,
            p.lector_id AS lector_id,
            ps.name AS proposal_status_id,
            p.last_name AS last_name,
            p.first_name AS first_name,
            p.patronymic AS patronymic,
            p.nickname AS nickname,
            s.sex AS sex,
            p.email AS email,
            p.term AS term,
            p.problem AS problem,
            p.context_path AS context_path,
            p.context_url AS context_url,
            p.images_path AS images_path,
            p.other_docs_path AS other_docs_path,
            p.created AS created
        FROM duck.proposals p
        LEFT JOIN duck.sexs s ON s.id = p.sex_id
        LEFT JOIN duck.proposals_status ps ON ps.id = p.proposal_status_id
    </sql>

    <!-- ================================ CREATE ================================ -->
    <insert id="create" parameterType="Proposal">
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="BEFORE">
            INSERT INTO duck.proposals(lector_id, proposal_status_id, last_name, first_name, patronymic, nickname,
                                        sex_id, email, term, problem, context_path, context_url, images_path,
                                        other_docs_path, created)
            VALUES (#{lectorId}, #{status.ordinal}, #{lastName}, #{firstName}, #{patronymic}, #{nickname},
                    #{sex.ordinal}, #{email}, #{term}, #{problem}, #{contextPath}, #{contextUrl}, #{imagesPath},
                    #{otherDocsPath}, #{created})
            RETURNING id;
        </selectKey>
    </insert>

    <!-- ================================= READ ================================= -->
    <select id="read" parameterType="int" resultMap="proposalResult">
        <include refid="selectAllProposals" />
        WHERE p.id = #{id};
    </select>

    <!-- ================================ UPDATE ================================ -->
    <update id="update" parameterType="Proposal">
        UPDATE duck.proposals
        <set>
            lector_id = #{lectorId},
            <if test="status != null">proposal_status_id = #{status.ordinal},</if>
            last_name = #{lastName},
            first_name = #{firstName},
            patronymic = #{patronymic},
            nickname = #{nickname},
            sex_id = #{sex.ordinal},
            email = #{email},
            <if test="term != null">term = #{term},</if>
            <if test="problem != null">problem = #{problem},</if>
            context_path = #{contextPath},
            context_url = #{contextUrl},
            images_path = #{imagesPath},
            other_docs_path = #{otherDocsPath},
            <if test="created != null">created = #{created}</if>
        </set>
        WHERE id = #{id};
    </update>

    <!-- ================================ DELETE ================================ -->
    <delete id="delete" parameterType="int">
        DELETE FROM duck.proposals WHERE id = #{id};
    </delete>

    <!-- ===================== DELETE REJECTED AND PROCESSED ==================== -->
    <delete id="deleteRejectedAndProcessed">
        DELETE FROM duck.proposals
        WHERE proposal_status_id IN (2, 3) /*REJECTED and PROCESSED*/;
    </delete>

    <!-- ======== FIND BY FIRSTNAME OR LASTNAME OR PATRONYMIC OR NICKNAME ======= -->
    <select id="findByAnyName" parameterType="string" resultMap="proposalResult">
        <include refid="selectAllProposals" />
        <![CDATA[
        WHERE p.last_name ilike #{name + "%"} OR p.first_name ilike #{name + "%"}
              OR p.patronymic ilike #{name + "%"} OR p.nickname ilike #{name + "%"};
        ]]>
    </select>

    <!-- =========================== FIND BY TERM NAME ========================== -->
    <select id="findByTermName" parameterType="string" resultMap="proposalResult">
        <include refid="selectAllProposals" />
        <![CDATA[
        WHERE p.term ilike #{termName + "%"};
        ]]>
    </select>

    <!-- ============================ FIND BY STATUS ============================ -->
    <select id="findByStatus" parameterType="int" resultMap="proposalResult">
        <include refid="selectAllProposals" />
        WHERE p.proposal_status_id = #{status};
    </select>

    <!-- =========================== FIND BY LECTOR ID ========================== -->
    <select id="findByLectorId" parameterType="int" resultMap="proposalResult">
        <include refid="selectAllProposals" />
        WHERE p.lector_id = #{lectorId};
    </select>

    <!-- =============================== FIND ALL =============================== -->
    <select id="findAll" resultMap="proposalResult">
        <include refid="selectAllProposals" />
        ORDER BY p.created DESC;
    </select>
</mapper>
