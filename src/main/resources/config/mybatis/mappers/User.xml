<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.magistr.duck.dao.UserDao">
    <!-- ============================== RESULT MAP ============================== -->
    <resultMap type="User" id="userResult">
        <id property="id" column="user_id"/>
        <result property="name" column="user_name"/>
        <result property="password" column="user_password"/>
        <collection property="roles" ofType="Role" resultMap="rolesResult" columnPrefix="role_"/>
    </resultMap>

    <resultMap type="Role" id="rolesResult">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
    </resultMap>

    <!-- ========================= SELECT ALL USERS SQL ========================= -->
    <sql id="selectAllUsers">
        SELECT
            u.id AS user_id,
            u.name AS user_name,
            u.password AS user_password,
            r.id AS role_id,
            r.name AS role_name
        FROM duck.users u
        LEFT JOIN duck.users_roles ur ON ur.user_id = u.id
        LEFT JOIN duck.roles r ON r.id = ur.role_id
    </sql>

    <!-- ================================ CREATE ================================ -->
    <insert id="create" parameterType="User">
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="BEFORE">
            INSERT INTO duck.users(name, password)
            VALUES (#{name}, #{password}) RETURNING id;
        </selectKey>

        INSERT INTO duck.users_roles(user_id, role_id) VALUES
        <foreach collection="roles" item="role" separator=",">
            (#{id}, (SELECT r.id FROM duck.roles r WHERE r.name = #{role.name}))
        </foreach>;
    </insert>

    <!-- ================================= READ ================================= -->
    <select id="read" parameterType="int" resultMap="userResult">
        <include refid="selectAllUsers"/>
        WHERE u.id = #{id};
    </select>

    <!-- ================================ UPDATE ================================ -->
    <update id="update" parameterType="User">
        UPDATE duck.users
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="password != null">password = #{password}</if>
        </set>
        WHERE id = #{id};

        DELETE FROM duck.users_roles
        WHERE user_id = #{id};

        INSERT INTO duck.users_roles(user_id, role_id) VALUES
        <foreach collection="roles" item="role" separator=",">
            (#{id}, (SELECT r.id FROM duck.roles r WHERE r.name = #{role.name}))
        </foreach>;
    </update>

    <!-- ================================ DELETE ================================ -->
    <delete id="delete" parameterType="int">
        DELETE FROM duck.users WHERE id = #{id};
    </delete>

    <!-- ============================= FIND BY NAME ============================= -->
    <select id="findByName" parameterType="String" resultMap="userResult">
        <include refid="selectAllUsers"/>
        WHERE u.name = #{name};
    </select>

    <!-- =============================== FIND ALL =============================== -->
    <select id="findAll" resultMap="userResult">
        <include refid="selectAllUsers"/>
        ORDER BY u.name
    </select>
</mapper>
